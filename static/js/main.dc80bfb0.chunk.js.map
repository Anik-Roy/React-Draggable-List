{"version":3,"sources":["utils.tsx","dynamic.tsx","components/DynamicSizeList.tsx","icons/upload.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateSwapDistance","sibling","getDragStateZIndex","state","base","useDynamicList","items","swapDistance","onPositionUpdate","onPositionChange","sizes","useRef","Array","length","fill","current","useState","startIndex","handleDragStart","handleChange","useCallback","i","dragOffset","targetIndex","yOffset","target","nextHeight","undefined","prevHeight","Math","min","max","findIndex","swapSize","handleDragEnd","endIndex","handleMeasure","index","size","DynamicSizeItem","item","drag","setState","ref","useEffect","offsetHeight","offsetWidth","onDragStart","onDragEnd","onAnimationComplete","onViewportBoxUpdate","_viewportBox","delta","y","translate","useDynamicListItem","itemProps","dragState","eventHandlers","style","padding","margin","width","backgroundColor","zIndex","motion","div","layout","initial","border","borderRadius","whileHover","scale","boxShadow","whileTap","src","preview","alt","objectFit","height","FixedSizeList","useItems","setItems","clone","moveArray","props","map","id","ItemsContext","createContext","_","App","useDropzone","accept","multiple","onDrop","acceptedFiles","a","file","idx","Object","assign","URL","createObjectURL","getRootProps","getInputProps","Provider","value","className","UploadIcon","useContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc80bfb0.chunk.js","sourcesContent":["export function moveArray<T>(items: T[], startIndex: number, endIndex: number) {\n    const clone = [...items];\n    clone[endIndex] = items[startIndex];\n    clone[startIndex] = items[endIndex];\n    return clone;\n}\n\nexport const calculateSwapDistance = (sibling: number) => sibling;\n\nexport const getDragStateZIndex = (state: string, base = 0) => {\n    switch (state) {\n        case \"dragging\":\n            return base + 3;\n        case \"animating\":\n            return base + 2;\n        default:\n            return base + 1;\n    }\n};","import {\n    useState,\n    useRef,\n    useEffect,\n    useCallback,\n    MutableRefObject\n} from \"react\";\nimport { PanInfo, AxisBox2D, BoxDelta } from \"framer-motion\";\n\ntype SwapDistanceType = (sibling: number) => number;\n\nexport type DynamicListItem = {\n    index: number;\n    drag?: \"x\" | \"y\";\n};\n\nexport const findIndex = (\n    i: any,\n    yOffset: any,\n    sizes: any,\n    swapDistance: SwapDistanceType\n) => {\n    let target = i;\n\n    // If moving down\n    if (yOffset > 0) {\n        const nextHeight = sizes[i + 1];\n        if (nextHeight === undefined) return i;\n\n        const swapOffset = swapDistance(nextHeight);\n        if (yOffset > swapOffset) target = i + 1;\n\n        // If moving up\n    } else if (yOffset < 0) {\n        const prevHeight = sizes[i - 1];\n        if (prevHeight === undefined) return i;\n\n        const swapOffset = swapDistance(prevHeight);\n        if (yOffset < -swapOffset) target = i - 1;\n    }\n\n    return Math.min(Math.max(target, 0), sizes.length);\n};\n\nexport type DynamicListProps<T> = {\n    items: T[];\n    swapDistance: SwapDistanceType;\n    onPositionUpdate: (from: number, to: number) => void;\n    onPositionChange?: (startIndex: number, endIndex: number) => void;\n};\n\nexport type DynamicListItemProps = {\n    handleChange: (i: number, dragOffset: number) => void;\n    handleDragStart: (index: number) => void;\n    handleDragEnd: (endIndex: number) => void;\n    handleMeasure: (index: number, size: number) => void;\n};\n\nexport function useDynamicList<T>({\n    items,\n    swapDistance,\n    onPositionUpdate,\n    onPositionChange\n}: DynamicListProps<T>): DynamicListItemProps {\n    const sizes = useRef(new Array(items.length).fill(0)).current;\n    const [startIndex, handleDragStart] = useState(-1);\n\n    const handleChange = useCallback(\n        (i: number, dragOffset: number) => {\n            const targetIndex = findIndex(i, dragOffset, sizes, swapDistance);\n            if (targetIndex !== i) {\n                const swapSize = sizes[targetIndex];\n                sizes[targetIndex] = sizes[i];\n                sizes[i] = swapSize;\n\n                onPositionUpdate(i, targetIndex);\n            }\n        },\n        [sizes, swapDistance, onPositionUpdate]\n    );\n\n    const handleDragEnd = useCallback(\n        (endIndex: number) => {\n            if (onPositionChange && startIndex !== endIndex)\n                onPositionChange(startIndex, endIndex);\n            handleDragStart(-1);\n        },\n        [startIndex, onPositionChange]\n    );\n\n    const handleMeasure = useCallback(\n        (index: number, size: number) => {\n            sizes[index] = size;\n        },\n        [sizes]\n    );\n\n    return {\n        handleChange,\n        handleDragStart,\n        handleDragEnd,\n        handleMeasure\n    };\n}\n\ntype DragState = \"idle\" | \"animating\" | \"dragging\";\n\ntype DynamicListItemResult<T> = [\n    DragState,\n    MutableRefObject<T>,\n    {\n        onDragStart(\n            event: MouseEvent | TouchEvent | PointerEvent,\n            info: PanInfo\n        ): void;\n        onDragEnd(\n            event: MouseEvent | TouchEvent | PointerEvent,\n            info: PanInfo\n        ): void;\n        onAnimationComplete(): void;\n        onViewportBoxUpdate(box: AxisBox2D, delta: BoxDelta): void;\n    }\n];\n\nexport function useDynamicListItem<T extends HTMLElement>(\n    index: number,\n    drag: \"x\" | \"y\",\n    {\n        handleChange,\n        handleDragStart,\n        handleDragEnd,\n        handleMeasure\n    }: DynamicListItemProps\n): DynamicListItemResult<T> {\n    const [state, setState] = useState < DragState > (\"idle\");\n    const ref = useRef(null);\n\n    useEffect(() => {\n        if (ref && ref.current)\n            handleMeasure(\n                index,\n                drag === \"y\" ? ref.current.offsetHeight : ref.current.offsetWidth\n            );\n    }, [ref, handleMeasure, index, drag]);\n\n    return [\n        state,\n        ref,\n        {\n            onDragStart: () => {\n                setState(\"dragging\");\n                handleDragStart(index);\n            },\n            onDragEnd: () => {\n                setState(\"animating\");\n                handleDragEnd(index);\n            },\n            onAnimationComplete: () => {\n                if (state === \"animating\") setState(\"idle\");\n            },\n            onViewportBoxUpdate: (_viewportBox, delta) => {\n                if (state === \"dragging\") handleChange(index, delta.y.translate);\n            }\n        }\n    ];\n}","import React, { useCallback } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { moveArray, getDragStateZIndex, calculateSwapDistance } from \"../utils\";\nimport {\n    useDynamicList,\n    useDynamicListItem,\n    DynamicListItemProps\n} from \"../dynamic\";\nimport { useItems } from \"../App\";\n\ntype DynamicSizeItemProps = {\n    index: number;\n    item: any;\n    itemProps: DynamicListItemProps;\n};\n\nfunction DynamicSizeItem({\n    index,\n    item,\n    itemProps\n}: DynamicSizeItemProps) {\n    const [dragState, ref, eventHandlers] = useDynamicListItem<HTMLDivElement>(\n        index,\n        \"y\",\n        itemProps\n    );\n\n    return (\n        <div\n            style={{\n                padding: 0,\n                margin: 10,\n                width: \"90%\",\n                backgroundColor: \"white\",\n                // If we're dragging, we want to set the zIndex of that item to be on top of the other items.\n                zIndex: getDragStateZIndex(dragState)\n            }}\n        >\n            <motion.div\n                layout\n                initial={false}\n                drag=\"y\"\n                ref={ref}\n                style={{\n                    border: '1px solid #ddd',\n                    borderRadius: 5\n                }}\n                whileHover={{\n                    scale: 1.03,\n                    boxShadow: \"0px 3px 3px rgba(0,0,0,0.15)\"\n                }}\n                whileTap={{\n                    scale: 1.12,\n                    boxShadow: \"0px 5px 5px rgba(0,0,0,0.1)\"\n                }}\n                {...eventHandlers}\n            >\n                <div style={{ padding: \"20px\" }}>\n                    <img src={item.preview} alt=\"image\" style={{ objectFit: \"contain\", width: \"50px\", height: \"50px\" }} />\n                    <p>Click and hold me to drag</p>\n                </div>\n            </motion.div>\n        </div>\n    );\n}\n\nexport default function FixedSizeList() {\n    const [items, setItems] = useItems();\n    const onPositionUpdate = useCallback(\n        (startIndex: number, endIndex: number) => {\n            setItems(moveArray(items, startIndex, endIndex));\n        },\n        [items, setItems]\n    );\n\n    const props = useDynamicList({\n        items,\n        swapDistance: calculateSwapDistance,\n        onPositionUpdate\n    });\n\n    return (\n        <div>\n            <div style={{ width: \"100%\" }}>\n                {items.map((item, i) => (\n                    <DynamicSizeItem\n                        key={item.id}\n                        item={item}\n                        index={i}\n                        itemProps={props}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/upload.c6f29fc7.png\";","import React, { createContext, useContext, useState } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport DynamicSizeList from \"./components/DynamicSizeList\";\nimport \"./App.css\";\nimport UploadIcon from './icons/upload.png';\n\n/**\n * This is an example of drag-to-reorder in Framer Motion 3.\n *\n * Fixed size version: https://codesandbox.io/s/framer-motion-2-drag-to-reorder-forked-njcdl\n * Virtual list version: https://codesandbox.io/s/framer-motion-2-drag-to-reorder-fixed-size-forked-kxnb7\n */\n\nexport type ItemType = {\n    id: number;\n    preview: string;\n};\n\nconst ItemsContext = createContext<\n    [ItemType[], (setItems: ItemType[]) => void]\n>([[], (_) => null]);\n\nexport default function App() {\n    const [items, setItems] = useState<ItemType[]>(() => []);\n\n    const { getRootProps, getInputProps } = useDropzone({\n        accept: \"image/*\",\n        multiple: true,\n        onDrop: async (acceptedFiles) => {\n            if (acceptedFiles.length) {\n                setItems(acceptedFiles.map((file, idx) => Object.assign(file, {\n                    preview: URL.createObjectURL(file),\n                    id: idx\n                })));\n            }\n        },\n    });\n\n    return (\n        <ItemsContext.Provider value={[items, setItems]}>\n            <div\n                {...getRootProps({\n                    className:\n                        \"border-dashed border-2 border-border-base h-36 rounded flex flex-col justify-center items-center cursor-pointer focus:border-accent-400 focus:outline-none\",\n                })}>\n                <input {...getInputProps()} />\n                <div className=\"flex flex-col justify-items-center items-center\">\n                    <img width=\"50\" height=\"50\" src={UploadIcon} alt=\"icon\" />\n                    <p className=\"text-body text-sm mt-4 text-center\">\n                        upload images\n                    </p>\n                </div>\n            </div>\n            <DynamicSizeList />\n        </ItemsContext.Provider>\n    );\n}\n\nexport const useItems = () => useContext(ItemsContext);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}